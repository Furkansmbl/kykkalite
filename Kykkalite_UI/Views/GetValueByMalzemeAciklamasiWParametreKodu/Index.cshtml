@using static Kykkalite_UI.Controllers.GetValueByMalzemeAciklamasiWParametreKoduController
@using System.Text.Json
@using System.Text.Encodings.Web

@model QueryViewModel
@{
    ViewData["Title"] = "Index";
    Layout = "";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Query Page</title>
    <style>
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }
        body {
            font-family: Arial, sans-serif;
            background-color: #fff;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            padding-top: 60px;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0,0,0);
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }
        .container {
            display: flex;
            flex-direction: row;
            width: 100%;
            margin: auto;
            padding: 20px;
            border-radius: 8px;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.7);
        }

        .modal-content {
            position: relative;
            margin: auto;
            padding: 0;
            width: 90%;
            max-width: 1200px;
            top: 50%;
            transform: translateY(-50%);
        }

        .close {
            color: white;
            position: absolute;
            top: 10px;
            right: 25px;
            font-size: 35px;
            font-weight: bold;
            cursor: pointer;
        }

        .form-container, .results-container {
            flex: 1;
            margin: 10px;
            padding: 20px;
            border-radius: 8px;
            background-color: #f9f9f9;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 20px;
            display: flex;
            flex-direction: column;
        }

            .form-group label {
                font-weight: bold;
                margin-bottom: 5px;
            }

            .form-group input[type="text"],
            .form-group input[type="number"],
            .form-group select {
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                margin-top: 5px;
                font-size: 16px;
                background-color: #fff;
                box-shadow: none;
            }

            .form-group button {
                padding: 10px 20px;
                background-color: #007bff;
                border: none;
                color: #fff;
                border-radius: 5px;
                cursor: pointer;
                transition: background-color 0.3s;
                font-size: 16px;
                box-shadow: none;
            }

                .form-group button:hover {
                    background-color: #0056b3;
                }

        table {
            width: 100%;
            margin-top: 20px;
            background-color: #fff;
            border-collapse: collapse;
            font-size: 14px;
        }

        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #007bff;
            color: #fff;
        }

        tr:hover {
            background-color: #f2f2f2;
        }

        .no-results {
            margin-top: 20px;
            color: #dc3545;
        }


        .calculated-values {
            display: flex;
            justify-content: space-between;
        }

        .column-metrics {
            flex: 1;
            padding: 10px;
        }
        .metric-label {
            font-weight: bold;
            margin-top: 10px;
        }

        .metric-value {
            margin-bottom: 10px;
        }
   

        .chart-container {
            margin-top: 20px;
        }

        .results-layout {
            display: flex;
            flex-direction: column;
        }

        .values-container {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            gap: 20px;
        }

        .chart-container canvas {
            width: 100%;
            height: auto;
        }
        .upper-charts, .lower-charts {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0"></script>
</head>
<body>
    <div class="form-group">
        <td><a href="/Urunler/Index" class="btn btn-outline-success">Ana Sayfaya Git</a></td>

    </div>
    <div class="container">
        <div class="form-container">
            <form method="post">
                <div class="form-group">
                    <label for="personelAdSoyad">Personel:</label>
                    <input type="text" class="form-control" value="@ViewBag.PersonelSicilNo" readonly />
                </div>
                <div class="form-group">
                    <label for="malzemeAciklamasi">Malzeme Açıklaması:</label>
                    @Html.DropDownList("MalzemeAciklamasi", (List<SelectListItem>)ViewBag.v, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label for="kontrolparametresi">kontrolparametresi</label>
                    <input type="text" id="kontrolparametresi" name="kontrolparametresi" required>
                </div>
                <div class="form-group">
                    <label for="baslangicTarihi">Başlangıç Tarihi</label>
                    <input type="date" id="baslangicTarihi" name="baslangicTarihi" required value="2000-01-01">
                </div>
                <div class="form-group">
                    <label for="bitisTarihi">Bitiş Tarihi</label>
                    <input type="date" id="bitisTarihi" name="bitisTarihi" required value="@DateTime.Now.ToString("yyyy-MM-dd")">
                </div>
                <div class="form-group">
                    <button type="submit">Query</button>
                </div>
            </form>
        </div>


        <div class="results-container">
            @if (Model != null && Model.ResultSet != null && Model.ResultSet.Any())
            {
                int numRows = 50;
                int numCols = 1;
                var resultSet = Model.ResultSet;
                var columnValues = new List<decimal>[numCols];
                var columnAverages = new decimal[numCols];
                var columnTolerances = new decimal[numCols];
                var columnRanges = new decimal[numCols];
                var columnRangeAverages = new decimal[numCols];
                var columnSigmaGercelesen = new decimal[numCols];
                var columnSigmaBeklenen = new decimal[numCols];
                var UKS = new decimal[numCols];
                var AKS = new decimal[numCols];
                var GerBek = new string[numCols];
                var columnStandartSapmalar = new decimal[numCols];
                var columnDegisimKatsayilari = new decimal[numCols];

                var firstResult = resultSet.FirstOrDefault();

                if (firstResult != null)
                {
                    decimal ustSartliOnaySiniri = (decimal)firstResult.UstSartliKabulSiniri;
                    decimal altSartliOnaySiniri = (decimal)firstResult.AltSartliKabulSiniri;
                    decimal altOnaySiniri = (decimal)firstResult.AltOnaySiniri;
                    decimal ustOnaySiniri = (decimal)firstResult.UstOnaySiniri;
                    decimal tolerance = ustSartliOnaySiniri - altSartliOnaySiniri;

                    decimal sigmaBeklenen;
                    if (firstResult.ParametreTipiOlcmeGozlem == "1")
                    {
                        sigmaBeklenen = tolerance / 8;
                    }
                    else if (firstResult.ParametreTipiOlcmeGozlem == "0")
                    {
                        sigmaBeklenen = tolerance / 4;
                    }
                    else
                    {
                        throw new InvalidOperationException("Invalid value for ParametreTipiOlcmeGozlem.");
                    }

                    for (int i = 0; i < numCols; i++)
                    {
                        columnValues[i] = new List<decimal>();
                        for (int j = 0; j < numRows; j++)
                        {
                            int index = i * numRows + j;
                            if (index < resultSet.Count && decimal.TryParse(resultSet[index].Value, out decimal value))
                            {
                                columnValues[i].Add(value);
                            }
                        }
                        if (columnValues[i].Count > 0)
                        {
                            columnAverages[i] = columnValues[i].Average();
                            columnRanges[i] = columnValues[i].Max() - columnValues[i].Min();
                            columnRangeAverages[i] = columnValues[i].Count > 1 ? columnRanges[i] / (columnValues[i].Count - 1) : columnRanges[i];
                            UKS[i] = columnRangeAverages[i] * 3.267m;
                            AKS[i] = columnRangeAverages[i] * 0;
                            columnSigmaGercelesen[i] = columnRangeAverages[i] / 1.128m;
                            columnTolerances[i] = tolerance;
                            columnSigmaBeklenen[i] = sigmaBeklenen;
                            columnStandartSapmalar[i] = (decimal)Math.Sqrt((double)columnValues[i].Sum(v => (v - columnAverages[i]) * (v - columnAverages[i])) / (columnValues[i].Count - 1));
                            columnDegisimKatsayilari[i] = columnStandartSapmalar[i] / columnAverages[i];
                            if (columnSigmaBeklenen[i] < columnRangeAverages[i] / 1.128m)
                            {
                                GerBek[i] = "Süreç değişkenliğini gerektiğinden fazladır.";
                            }
                            else
                            {
                                GerBek[i] = "Süreç değişkenliği gerektiğinden azdır.";
                            }
                        }
                    }
                }
                else
                {
                    throw new InvalidOperationException("Sonuç Bulunamadı...");
                }

                <div class="results-layout">
                    <div class="calculated-values">
                        <div class="left-column">
                            @for (int i = 0; i < numCols; i++)
                            {
                                <div class="column-metrics">
                                    <div class="metric-label">Ortalama</div>
                                    <div class="metric-value">@columnAverages[i].ToString("F3")</div>

                                    <div class="metric-label">Tolerans</div>
                                    <div class="metric-value">@columnTolerances[i].ToString("F3")</div>

                                    <div class="metric-label">Range</div>
                                    <div class="metric-value">@columnRanges[i].ToString("F3")</div>

                                    <div class="metric-label">Standart Sapma</div>
                                    <div class="metric-value">@columnStandartSapmalar[i].ToString("F3")</div>

                                    <div class="metric-label">Değişim Katsayısı</div>
                                    <div class="metric-value">@columnDegisimKatsayilari[i].ToString("F3")</div>
                                </div>
                            }
                        </div>

                        <div class="right-column">
                            @for (int i = 0; i < numCols; i++)
                            {
                                <div class="column-metrics">
                                    <div class="metric-label">Range Ortalaması</div>
                                    <div class="metric-value">@columnRangeAverages[i].ToString("F3")</div>

                                    <div class="metric-label">Sigma Gerçekleşen</div>
                                    <div class="metric-value">@columnSigmaGercelesen[i].ToString("F3")</div>

                                    <div class="metric-label">Sigma Beklenen</div>
                                    <div class="metric-value">@columnSigmaBeklenen[i].ToString("F3")</div>

                                    <div class="metric-label">Durum</div>
                                    <div class="metric-value">@GerBek[i]</div>
                                </div>
                            }
                        </div>

                    </div>

                    <html>
                    <html>
                    <canvas id="spcChart" width="800" height="400"></canvas>
                    <canvas id="xbarChart" width="400" height="200"></canvas>

                    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

                    <div id="spcChartModal" class="modal">
                        <div class="modal-content">
                            <span class="close">&times;</span>
                            <canvas id="expandedSpcChart" width="800" height="400"></canvas>
                        </div>
                    </div>

                    <div id="xbarChartModal" class="modal">
                        <div class="modal-content">
                            <span class="close">&times;</span>
                            <canvas id="expandedXbarChart" width="800" height="400"></canvas>
                        </div>
                    </div>
        </div>


           <script>
        var columnValues = @Html.Raw(JsonSerializer.Serialize(columnValues[0]));
        var averageValue = columnValues.reduce((sum, value) => sum + value, 0) / columnValues.length;

            var spcChartData = {
                labels: @Html.Raw(JsonSerializer.Serialize(resultSet.Select((_, index) => index + 1))),
                datasets: [
                    {
                        label: 'Değerler',
                        data: columnValues,
                        borderColor: 'rgba(147, 197, 114, 1)',
                        backgroundColor: 'rgba(147, 197, 114, 0.2)',
                        borderWidth: 3,
                        pointRadius: 0,
                        borderDash: []
                    },
                    {
                        label: 'Alt Onay Sınırı',
                        data: @Html.Raw(JsonSerializer.Serialize(Enumerable.Repeat(firstResult.AltOnaySiniri, resultSet.Count))),
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 3,
                        fill: false,
                        borderDash: [],
                        pointRadius: 0
                    },
                    {
                        label: 'Üst Onay Sınırı',
                        data: @Html.Raw(JsonSerializer.Serialize(Enumerable.Repeat(firstResult.UstOnaySiniri, resultSet.Count))),
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 3,
                        fill: false,
                        borderDash: [],
                        pointRadius: 0
                    },
                    {
                        label: 'Alt Şartlı Kabul Sınırı',
                        data: @Html.Raw(JsonSerializer.Serialize(Enumerable.Repeat(firstResult.AltSartliKabulSiniri, resultSet.Count))),
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderWidth: 3,
                        fill: false,
                        borderDash: [],
                        pointRadius: 0
                    },
                    {
                        label: 'Üst Şartlı Kabul Sınırı',
                        data: @Html.Raw(JsonSerializer.Serialize(Enumerable.Repeat(firstResult.UstSartliKabulSiniri, resultSet.Count))),
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderWidth: 3,
                        fill: false,
                        borderDash: [],
                        pointRadius: 0
                    },
                    {
                        label: 'Ortalama',
                        data: @Html.Raw(JsonSerializer.Serialize(Enumerable.Repeat(columnAverages[0], resultSet.Count))),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 3,
                        fill: false,
                        borderDash: [],
                        pointRadius: 0
                    }
                ]
            };

        var spcChartOptions = {
            scales: {
                x: {
                    beginAtZero: true
                },
                y: {
                    beginAtZero: true,
                    suggestedMin: @firstResult.AltOnaySiniri,
                    suggestedMax: @firstResult.UstOnaySiniri
                }
            }
        };

        var ctx = document.getElementById('spcChart').getContext('2d');
        var spcChart = new Chart(ctx, {
            type: 'line',
            data: spcChartData,
            options: spcChartOptions
        });

        var xbarChartData = {
            labels: @Html.Raw(JsonSerializer.Serialize(resultSet.Select((_, index) => index + 1))),
            datasets: [
                {
                    label: 'Range Ortalama',
                    data: @Html.Raw(JsonSerializer.Serialize(Enumerable.Repeat(columnRangeAverages[0], resultSet.Count))),
                    borderColor: 'rgba(255, 159, 64, 1)',
                    backgroundColor: 'rgba(255, 159, 64, 0.2)',
                    borderWidth: 3,
                    fill: false,
                    borderDash: [5, 5],
                    pointRadius: 0
                },
                {
                    label: 'Veri Değişimi',
                    data: @Html.Raw(JsonSerializer.Serialize(columnValues[0])),
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 3,
                        pointRadius: 0
                },
                {
                    label: 'ÜKS',
                    data: @Html.Raw(JsonSerializer.Serialize(Enumerable.Repeat(UKS[0], resultSet.Count))),
                    borderColor: 'rgba(255, 206, 86, 1)',
                    backgroundColor: 'rgba(255, 206, 86, 0.2)',
                    borderWidth: 3,
                    fill: false,
                    borderDash: [5, 5],
                    pointRadius: 0
                },
                {
                    label: 'AKS',
                    data: @Html.Raw(JsonSerializer.Serialize(Enumerable.Repeat(AKS[0], resultSet.Count))),
                    borderColor: 'rgba(153, 102, 255, 1)',
                    backgroundColor: 'rgba(153, 102, 255, 0.2)',
                    borderWidth: 3,
                    fill: false,
                    borderDash: [5, 5],
                    pointRadius: 0
                }
            ]
        };

        var xbarChartOptions = {
            scales: {
                x: {
                    beginAtZero: true
                },
                y: {
                    beginAtZero: true
                }
            }
        };

        var ctxXbar = document.getElementById('xbarChart').getContext('2d');
        var xbarChart = new Chart(ctxXbar, {
            type: 'line',
            data: xbarChartData,
            options: xbarChartOptions
        });

        var spcChartModal = document.getElementById("spcChartModal");
        var spcChartCloseBtn = spcChartModal.getElementsByClassName("close")[0];

        document.getElementById('spcChart').addEventListener('click', function () {
            spcChartModal.style.display = "block";
            var ctxExpandedSpc = document.getElementById('expandedSpcChart').getContext('2d');
            new Chart(ctxExpandedSpc, {
                type: 'line',
                data: spcChartData,
                options: spcChartOptions
            });
        });

        spcChartCloseBtn.onclick = function () {
            spcChartModal.style.display = "none";
        };

        var xbarChartModal = document.getElementById("xbarChartModal");
        var xbarChartCloseBtn = xbarChartModal.getElementsByClassName("close")[0];

        document.getElementById('xbarChart').addEventListener('click', function () {
            xbarChartModal.style.display = "block";
            var ctxExpandedXbar = document.getElementById('expandedXbarChart').getContext('2d');
            new Chart(ctxExpandedXbar, {
                type: 'line',
                data: xbarChartData,
                options: xbarChartOptions
            });
        });

        xbarChartCloseBtn.onclick = function () {
            xbarChartModal.style.display = "none";
        };

        window.onclick = function (event) {
            if (event.target == spcChartModal) {
                spcChartModal.style.display = "none";
            }
            if (event.target == xbarChartModal) {
                xbarChartModal.style.display = "none";
            }
        };
    </script>
         

            }
            else
            {
                <p class="no-results">Sonuç bulunamadı, verileri tekrar kontrol ediniz.</p>
            }
        </div>
    </div>
</body>
</html>
